buttplug = require("gamedata\\scripts\\buttplug\\buttplug")

-- Set buttplug's print function to xray's printf
buttplug.print = function (arg)
    return printf("[buttplug] " .. arg)
end

local bone_strings = {}

-- TODO see if we can get more bone_strings
bone_strings[19] = "head"
bone_strings[17] = "head"
bone_strings[16] = "head"
bone_strings[15] = "head"
bone_strings[14] = "head"
bone_strings[13] = "torso"
bone_strings[12] = "torso"
bone_strings[11] = "torso"
bone_strings[2] = "torso"
bone_strings[20] = "leftarm"
bone_strings[21] = "leftarm"
bone_strings[22] = "leftarm"
bone_strings[23] = "leftarm"
bone_strings[33] = "rightarm"
bone_strings[34] = "rightarm"
bone_strings[35] = "rightarm"
bone_strings[36] = "rightarm"
bone_strings[3] = "leftleg"
bone_strings[4] = "leftleg"
bone_strings[7] = "rightleg"
bone_strings[8] = "rightleg"

local function start_buttplug()
    -- TODO: impl
    buttplug.init("STALKER: Anomaly", "ws://127.0.0.1:12345")
    printf("[buttplug] started")
end

local function demo_buzz()
    -- sleep(1000)
    buttplug.send_vibrate_cmd(0, {0.2, 0.2})
    printf("[buttplug] buzz...")
end

-- Params: (<game_object>,<number>,<vector>,<game_object>,<number>)
local function actor_on_hit_callback(obj, amount, local_direction, who, bone_id)
    local bone_name = bone_strings[bone_id]
    printf("[buttplug] got hit for %s in %s", amount, bone_name)
    buttplug.send_vibrate_cmd(0, {0.2, 0.2})
end

local tick_length = 500
local last_tick = time_global()
local next_tick = last_tick + tick_length

-- runs every tick
function update_buttplug()
    if (time_global() > next_tick) then
        buttplug.get_and_handle_message()

        if not buttplug.has_devices() then
            buttplug.get_devices()
        end

        last_tick = time_global()
        next_tick = last_tick + tick_length
    end
end

-- TODO: register callbacks
function on_game_start()
	RegisterScriptCallback("on_game_load", start_buttplug)
    RegisterScriptCallback("actor_on_update", update_buttplug)
    RegisterScriptCallback("actor_on_weapon_reload", demo_buzz)
	RegisterScriptCallback("actor_on_hit_callback", actor_on_hit_callback)
end
