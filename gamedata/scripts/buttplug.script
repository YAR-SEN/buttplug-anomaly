-- buttplug.script

-- Use relative imports
package.path = package.path .. ';gamedata\\scripts\\buttplug\\?.lua'

buttplug = require("buttplug")

-- Set buttplug's print function to xray's printf
buttplug.print = function (arg)
    return printf("[buttplug] " .. arg)
end

-- Safety variables
local max_vibration_power = 1.0
local vibrate_factor = 1.0

-- Buttplug update interval i.e. how often it checks for new messages
local update_interval = 500 -- ms
local prev_update = 0

-- Vars for controlling start/stop times for vibration
local vibrating = false
local vibrate_start_time = 0
local vibrate_stop_time = 0
local pattern_stop_time = 0
local base_vibration_level = 0.0
local current_vibration_level = 0.0

-- Misc vars
local prev_health = 1
local prev_bleeding = 0

-- Bone names for determining which body part got hit
local bone_names = {
    [19] = "head",
    [17] = "head",
    [16] = "head",
    [15] = "head",
    [14] = "head",
    [13] = "torso",
    [12] = "torso",
    [11] = "torso",
    [2] = "torso",
    [20] = "leftarm",
    [21] = "leftarm",
    [22] = "leftarm",
    [23] = "leftarm",
    [33] = "rightarm",
    [34] = "rightarm",
    [35] = "rightarm",
    [36] = "rightarm",
    [3] = "leftleg",
    [4] = "leftleg",
    [7] = "rightleg",
    [8] = "rightleg"
}

-- Caliber based vibration strength
local ammo_power = {
    ["7.62x25"] = 0.3, -- tokarev
    ["9x18"] = 0.3, -- makarov
    ["9x19"] = 0.3, -- glock

    ["11.43x23"] = 0.4, -- .45 ACP
    ["5.7x28"] = 0.4,
    ["4.6x30"] = 0.4,

    ["5.56x45"] = 0.5,
    ["5.45x39"] = 0.5,
    ["357"] = 0.5,
    ["9x39"] = 0.5,

    ["vog-25"] = 0.6,
    ["m209"] = 0.6,

    ["7.92x33"] = 0.7, -- stg-44
    ["7.62x51"] = 0.7, -- FAL
    ["7.62x39"] = 0.7, -- AKM
    ["og-7b"] = 0.7, -- RPG-7
    ["12x76"] = 0.7,
    ["12x70"] = 0.7,

    ["7.62x54"] = 0.8, -- mosin
    ["pkm"] = 0.8, -- 7.62x54 box mags
    ["gauss"] = 0.8,

    ["12.7x55"] = 1.0, -- VSK
    ["magnum"] = 1.0, -- 338 lapua magnum
    ["50"] = 1.0 -- 50 bmg
}

-- List of gas mask equipped outfits in the game
local gas_masks = {
    -- Helmets
    ["helm_resp"] = true,
    ["helm_ach7ex"] = true,
    ["helm_battle"] = true,
    ["helm_exo"] = true,
    ["helm_m40"] = true,
    ["helm_m50"] = true,
    ["helm_metro"] = true,
    ["helm_ppm88"] = true,
    ["helm_protective"] = true,
    ["helm_ranger"] = true,
    ["helm_respirator"] = true,
    ["helm_respirator_gp5"] = true,
    ["helm_respirator_old"] = true,
    ["helm_spartan"] = true,
    ["helm_tactic"] = true,
    -- Outfits (medium)
    ["bandit_nbc_outfit"] = true,
    ["bandit_scientific_dark_outfit"] = true,
    ["bandit_scientific_outfit"] = true,
    ["cs_nbc_outfit"] = true,
    ["cs_scientific_outfit"] = true,
    ["cs_scientific_outfit_good"] = true,
    ["dolg_scientific_outfit"] = true,
    ["dolg_scientific_red_outfit"] = true,
    ["dolg_scientific_wood_outfit"] = true,
    ["ecolog_outfit_blue"] = true,
    ["ecolog_outfit_green"] = true,
    ["ecolog_outfit_orange"] = true,
    ["ecolog_outfit_red"] = true,
    ["ecolog_outfit_white"] = true,
    ["ecolog_outfit_yello"] = true,
    ["hybrid_outfit"] = true,
    ["isg_scientific_outfit"] = true,
    ["merc_ace_outfit"] = true,
    ["merc_combat_scientific_outfit"] = true,
    ["merc_scientific_armored_outfit"] = true,
    ["merc_scientific_outfit"] = true,
    ["monolith_nbc_outfit"] = true,
    ["monolith_scientific_outfit"] = true,
    ["nbc_dolg_outfit"] = true,
    ["nbc_freedom_outfit"] = true,
    ["nbc_outfit"] = true,
    ["renegade_scientific_outfit"] = true,
    ["scientific_outfit"] = true,
    ["svoboda_scientific_outfit"] = true,
    ["wastelander_outfit"] = true,
    ["nbc_merc_outfit"] = true,
    -- Outfits (heavy)
    ["army_nosorog_outfit"] = true,
    ["bandit_exolight_outfit"] = true,
    ["cs_exolight_outfit"] = true,
    ["dolg_exolight_outfit"] = true,
    ["dolg_nosorog_outfit"] = true,
    ["exo_dolg_outfit"] = true,
    ["exo_dolg_red_outfit"] = true,
    ["exo_dolg_urban_outfit"] = true,
    ["exo_dolg_wood_outfit"] = true,
    ["exo_merc_grass_outfit"] = true,
    ["exo_merc_urban_outfit"] = true,
    ["exo_merc_wood_outfit"] = true,
    ["exo_wood_outfit"] = true,
    ["exolight_outfit"] = true,
    ["freedom_exo_vineleaf_outfit"] = true,
    ["freedom_nosorog_outfit"] = true,
    ["isg_exolight_outfit"] = true,
    ["merc_exolight_outfit"] = true,
    ["merc_nosorog_outfit"] = true,
    ["military_exolight_outfit"] = true,
    ["monolith_exolight_outfit"] = true,
    ["monolith_nosorog_outfit"] = true,
    ["svoboda_exolight_outfit"] = true
}

local function scale_power(power)
    return math.min(max_vibration_power, power * vibrate_factor)
end

-- Scale vibration according to user preferences. Allows them to set a
-- vibration factor that is applied to all vibrate commands, as well as
-- a hard cap on vibration power.
local function scaled_vibrate(power)
    if buttplug.count_devices() == 0 then return end

    current_vibration_level = power

    local scaled_power = 0

    -- Only scale if power is above 0
    if power > 0 then
        -- Never scale below the lowest possible value for the toy
        scaled_power = math.max(0.05, scale_power(power))
    end

    buttplug.send_vibrate_cmd(0, { scaled_power })
end

local function set_base_vibration_level(power)
    if buttplug.count_devices() == 0 then return end

    -- Only send a vibrate command if nothing else is vibrating
    if not vibrating then
        scaled_vibrate(power)
    end

    base_vibration_level = power
end

local function stop_vibrate()
    if buttplug.count_devices() == 0 then return end

    buttplug.send_vibrate_cmd(0, { 0 })
end

local function pattern_vibrate(power, on_time, off_time)
    if not vibrating then
        scaled_vibrate(power)
        vibrating = true
        vibrate_start_time = time_global()
        vibrate_stop_time = vibrate_start_time + on_time
        pattern_stop_time = vibrate_start_time + on_time + off_time
    end
end

-- Vibrate for a fixed amount of time
local function vibrate_for(power, on_time)
    pattern_vibrate(power, on_time, 0)
end

local function actor_on_hit_callback(obj, amount, local_direction, who, bone_id)
    -- printf("[buttplug] got hit for %s in %s", amount, bone_name)
    local bone_name = bone_names[bone_id]

    vibrate_for(amount, 500)
end

local function actor_on_weapon_fired(obj, wpn, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
	local wpn_id = wpn:id()
	local sec = wpn:section()
	local ammo_type_number = wpn:get_ammo_type()
	local ammo_list = utils_item.get_ammo(sec, wpn_id)
	local ammo_section = ammo_list[ammo_type_number+1]

    local caliber = string.match(ammo_section, 'ammo_([^_]+)')

    pattern_vibrate(ammo_power[caliber], 200, 100)
end

local function actor_item_to_slot(obj)
    local equipped_item = tostring(obj:section())

    if gas_masks[equipped_item] then
        vibrate_for(0.5, 1000)
    end
end

local dying = false
local die_time = 0

-- TODO: Fix this breaks controller death and also doesn't work lol
-- This is also here so that when the actor dies, it doesn't just buzz forever
local function actor_on_before_death(whoID, flags)
    flags.ret_value = false

    if not dying then
        dying = true
        die_time = time_global() + 500
        stop_vibrate()
    end

    buttplug.get_and_handle_message()

    if time_global() > die_time then
        db.actor:kill(db.actor, true)
    end
end

-- TODO: These are bugged and somehow persist after Lua is destroyed
local function on_before_surge(t)
    -- printf("surge trigger")
    -- vibrate_for(0.1, 7000)
end

local function on_before_psi_storm(t)
    -- printf("psi storm trigger")
    -- vibrate_for(0.1, 7000)
end

local function actor_on_land(height)
    -- 3-4 jumping up to something
    -- 6-7 jumping in place
    -- 10-12 jumping off a low roof
    -- 15 and up: damage

    -- Exponentially ramps up towards fall damage threshold
    local power = ((height / 15) ^ 2) * 0.7

    vibrate_for(power, 100)
end

local function set_vibration_from_bleed(bleeding)
    local new_level = base_vibration_level

    if bleeding == 0 then new_level = 0.0
    elseif bleeding > 0.95 then new_level = 0.4
    elseif bleeding > 0.90 then new_level = 0.3
    elseif bleeding > 0.80 then new_level = 0.2
    elseif bleeding > 0.60 then new_level = 0.1
    elseif bleeding > 0.00 then new_level = 0.05
    end

    if new_level ~= base_vibration_level then
        -- printf("stepping vibrate level to: %s", new_level)
        set_base_vibration_level(new_level)
    end

    -- printf("bleeding: %s", bleeding)
end

local function is_actor_zombied()
    return db.actor:character_community() == "actor_zombied"
end

local function is_controller(obj)
    return obj:clsid() == clsid.controller_s
end

-- Got this from arszi_psy.script, which is where all the psy-stuff is
-- done in Anomaly
local function actor_on_before_hit(s_hit)
    if (s_hit.type ~= 4) then return end

    if (is_actor_zombied()) then
        s_hit.power = 0
        return 
    end

    if (s_hit.draftsman and is_controller(s_hit.draftsman)) then
        vibrate_for(0.6, 1200)
    end
end

local function actor_on_update()
    local actor = db.actor
    if (not actor) then
		return
	end

    -- local health = actor.health
    local bleeding = actor.bleeding

    set_vibration_from_bleed(bleeding)
end

local function main_menu_on_init()
    buttplug.send_stop_device_cmd(0)
end

local function main_menu_on_quit()
    scaled_vibrate(current_vibration_level)
end

function start_buttplug()
    buttplug.connect("B.U.T.T.P.L.U.G.", "ws://127.0.0.1:12345")
    printf("[buttplug] started")
end

table.insert(buttplug.callbacks.ServerInfo, function()
    -- Ask for device list when connected
    buttplug.request_device_list()
end)

table.insert(buttplug.callbacks.DeviceList, function()
    -- If server doesn't know about devices, start scanning
    if buttplug.count_devices() == 0 then
        buttplug.start_scanning()
    end
end)

table.insert(buttplug.callbacks.DeviceAdded, function()
    -- Stop scanning after first device is found
    buttplug.stop_scanning()
end)

table.insert(buttplug.callbacks.DeviceRemoved, function()
    -- Start scanning if we lose a device
    buttplug.start_scanning()
end)

function update_timers()
    -- Stop vibrating if its time to stop
    if vibrating and (time_global() > vibrate_stop_time) then
        -- Only send a command if we have to
        if current_vibration_level ~= base_vibration_level then
            scaled_vibrate(base_vibration_level)
        end
    end

    -- New vibrate commands can be issued
    if time_global() > pattern_stop_time then
        vibrating = false
    end
end

function update_buttplug()
    -- Don't update on every tick
    if (time_global() < (prev_update + update_interval)) then
        return
    end

    local err = buttplug.get_and_handle_message()
    if err ~= nil then
        printf("[buttplug] error: couldn't connect to buttplug server")
        printf("[buttplug] make sure the server is running, then reload your save")
        return
    end

    prev_update = time_global()
end

function on_game_start()
    -- Required callbacks
	RegisterScriptCallback("on_game_load", start_buttplug)
    RegisterScriptCallback("actor_on_update", update_buttplug)
    RegisterScriptCallback("actor_on_update", update_timers)
    -- Callbacks for everything else
    RegisterScriptCallback("actor_on_update", actor_on_update)
	RegisterScriptCallback("actor_on_hit_callback", actor_on_hit_callback)
    RegisterScriptCallback("actor_on_before_hit", actor_on_before_hit)
    RegisterScriptCallback("actor_on_weapon_fired", actor_on_weapon_fired)
    RegisterScriptCallback("actor_item_to_slot", actor_item_to_slot)
    -- RegisterScriptCallback("actor_on_before_death", actor_on_before_death)
    RegisterScriptCallback("actor_on_land", actor_on_land)
    RegisterScriptCallback("on_before_surge", on_before_surge)
    RegisterScriptCallback("on_before_psi_storm", on_before_psi_storm)
    RegisterScriptCallback("main_menu_on_init", main_menu_on_init)
    RegisterScriptCallback("main_menu_on_quit", main_menu_on_quit)
end
