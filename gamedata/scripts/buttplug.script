-- buttplug.script

-- Use relative imports
package.path = package.path .. ';gamedata\\scripts\\buttplug\\?.lua'

buttplug = require("buttplug")

-- Set buttplug's print function to xray's printf
buttplug.print = function (arg)
    return printf("[buttplug] " .. arg)
end

local update_interval = 500 -- ms
local last_update = 0

local bone_names = {}

bone_names[19] = "head"
bone_names[17] = "head"
bone_names[16] = "head"
bone_names[15] = "head"
bone_names[14] = "head"
bone_names[13] = "torso"
bone_names[12] = "torso"
bone_names[11] = "torso"
bone_names[2] = "torso"
bone_names[20] = "leftarm"
bone_names[21] = "leftarm"
bone_names[22] = "leftarm"
bone_names[23] = "leftarm"
bone_names[33] = "rightarm"
bone_names[34] = "rightarm"
bone_names[35] = "rightarm"
bone_names[36] = "rightarm"
bone_names[3] = "leftleg"
bone_names[4] = "leftleg"
bone_names[7] = "rightleg"
bone_names[8] = "rightleg"

local function start_buttplug()
    buttplug.init("STALKER: Anomaly", "ws://127.0.0.1:12345")
    printf("[buttplug] started")
end

local function demo_buzz()
    buttplug.send_vibrate_cmd(0, {0.2, 0.2})
    printf("[buttplug] buzz...")
end

-- Params: (<game_object>,<number>,<vector>,<game_object>,<number>)
local function actor_on_hit_callback(obj, amount, local_direction, who, bone_id)
    local bone_name = bone_names[bone_id]
    printf("[buttplug] got hit for %s in %s", amount, bone_name)
    buttplug.send_vibrate_cmd(0, {0.2, 0.2})
end

-- runs every tick
function update_buttplug()
    if (time_global() < (last_update + update_interval)) then
        return
    end

    local err = buttplug.get_and_handle_message()
    if err ~= nil then
        printf("[buttplug] error: couldn't connect to buttplug server")
        printf("[buttplug] make sure the server is running, then reload your save")
        return
    end

    if not buttplug.has_devices() then
        buttplug.get_devices()
    end

    last_update = time_global()
end

function on_game_start()
    -- Required callbacks
	RegisterScriptCallback("on_game_load", start_buttplug)
    RegisterScriptCallback("actor_on_update", update_buttplug)
    -- Callbacks for everything else
    RegisterScriptCallback("actor_on_weapon_reload", demo_buzz)
	RegisterScriptCallback("actor_on_hit_callback", actor_on_hit_callback)
end
